#+TITLE: My Emacs Configuration
#+AUTHOR: Rahuketu86
#+EMAIL: rahuketu86@gmail.com
#+OPTIONS: toc:3 num:nil ^:nil


* Emacs init.el
  #+BEGIN_EXAMPLE
    (package-initialize)

    (require 'org)
    (org-babel-load-file 
          (expand-file-name "configuration.org"
                             user-emacs-directory))
  #+END_EXAMPLE

* Emacs Customization Group
  #+BEGIN_SRC emacs-lisp
    (setq custom-file
          (expand-file-name "custom.el"
                            user-emacs-directory))
  #+END_SRC

* Emacs Repositories
  #+BEGIN_SRC emacs-lisp
    '(require 'package)
    ;;;(add-to-list 'package-archives
    ;;;'             '("marmalade" . "http://marmalade-repo.org/packages/") t)
    (add-to-list 'package-archives
                 '("melpa-stable" . "https://stable.melpa.org/packages/") t)
    (when (< emacs-major-version 24)
      ;; For important compatibility libraries like cl-lib
      (add-to-list 'package-archives '("gnu" . "http://elpa.gnu.org/packages/")))
    (package-initialize)

  #+END_SRC

* Utility Functions
  
** Function to open this configuration file 
   #+BEGIN_SRC emacs-lisp
     (defun my-config()
       "Function to open org configuration file"
       (interactive)
     ;;  (find-file load-file-name))
       (find-file (expand-file-name "configuration.org"
                                    user-emacs-directory)))
   #+END_SRC

* Configure Emacs for use-package
  #+BEGIN_SRC emacs-lisp
     (unless (package-installed-p 'use-package)
       (package-refresh-contents)
       (package-install 'use-package))

     (eval-when-compile
       (require 'use-package))
     (require 'diminish)
     (require 'bind-key)
   #+END_SRC

** Note
   If sometime error is encountered like File error: http://XXXXXX.el,
   Not Found"  we need to do 
   #+BEGIN_EXAMPLE
     M-x package-refresh-contents
   #+END_EXAMPLE

* Setup Guru Mode
  Guru mode works by disabling common key bindings and pushing for
  Emacs standard key bindings
  #+BEGIN_SRC emacs-lisp
    (use-package guru-mode
      :ensure t
      :config
      (guru-global-mode +1))
  #+END_SRC

* Setup Magit
  Magit is a git porcelain. With this we can stay within emacs for
  configuration modifications and commiting to git.
  #+BEGIN_SRC emacs-lisp
    (use-package magit
      :ensure t
      :bind ("C-x g" . magit-status))
  #+END_SRC
* Games
** Chess
   #+BEGIN_SRC emacs-lisp
     (use-package chess
       :ensure t
       :defer t)
   #+END_SRC
